pipeline {
    agent any
    parameters {
        choice(
                choices: ['CreateCluster','ValidateCluster' , 'DestroyCluster'],
                description: 'Select want you want to do', name: 'Kops_Option'
        )

        string(name: 'masterCount', defaultValue:'1' , description: 'Enter the no of Master')
        string(name: 'masterType', defaultValue: 'c5.large' , description: 'Enter the Master VM type')
        string (name: 'nodeCount', defaultValue: '3' , description: 'Enter the no of Node')
        string (name: 'nodeType', defaultValue: 'c5.large' , description: 'Enter the Node VM type')
        string (name: 'Name', defaultValue: 'hcl.k8s.local' , description: 'Enter your clusterName')
        string (name: 'KOPS_STATE_STORE', defaultValue: 's3://clusters.k8s.hclkops.vpc' , description: 'Enter s3 bucket name')

    }


    stages {
        stage ('checkingKopsVersion') {
            steps {
                sh 'kops version'

            }
        }

        stage('CreatekopsCluster') {
            when {
                expression {
                    params.Kops_Option == 'CreateCluster'
                }
            }

            steps {

                withAWS(credentials:'awsaccesskey') {
                    sh "kops create cluster --cloud=aws --zones=ap-south-1b --zones=ap-south-1a  --name=${params.Name} --state=${params.KOPS_STATE_STORE} --master-count=${params.masterCount} --master-size=${params.masterType} --node-count=${params.nodeCount} --node-size=${params.nodeType} --yes"
                }
            }
            }


        stage('ValidateCluster') {
           when {
           expression {
              params.Kops_Option == 'ValidateCluster'
           }
       }
       steps {
           withAWS(credentials: 'awsaccesskey') {
               sh " kops validate cluster --name=${params.Name} --state=${params.KOPS_STATE_STORE}"
             }
       }

    }

        stage('DestroyCluster') {
       when {
           expression {
              params.Kops_Option == 'DestroyCluster'
           }
       }
       steps {
           withAWS(credentials: 'awsaccesskey') {
               sh "kops delete cluster --name=${params.Name} --state=${params.KOPS_STATE_STORE} --yes"
}
       }
    }
    }
    }
