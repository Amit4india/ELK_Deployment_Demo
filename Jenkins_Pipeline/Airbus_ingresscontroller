pipeline {
    agent any
    parameters {
        choice(
                choices: ['CreateIngressController','AccessIngress' , 'DestroyIngressController', 'DeploySampleApplication'],
                description: 'Select want you want to do', name: 'k8sIngress_Option'
        )
    }
      stages {


       stage('CreateIngressController') {
            when {
                expression {
                    params.k8sIngress_Option == 'CreateIngressController'
                }
            }

            steps {

               sh '''
               kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml
               kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/aws/service-l4.yaml
               kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/aws/patch-configmap-l4.yaml
               '''
                }
            }


        stage('AccessIngress') {
           when {
           expression {
              params.k8sIngress_Option == 'AccessIngress'
           }
       }
         steps {

            sh 'kubectl describe svc ingress-nginx -n ingress-nginx'

       }

    }

       stage('DestroyIngressController') {
           when {
           expression {
              params.k8sIngress_Option == 'DestroyIngressController'
           }
       }
         steps {
           sh '''
               kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml
               kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/aws/service-l4.yaml
               '''

       }

    }

            }
}